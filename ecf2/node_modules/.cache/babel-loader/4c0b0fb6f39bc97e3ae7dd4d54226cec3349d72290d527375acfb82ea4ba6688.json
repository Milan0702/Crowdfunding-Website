{"ast":null,"code":"var _jsxFileName = \"D:\\\\All Projects\\\\CrowdFundingWebsite\\\\ecf2\\\\src\\\\components\\\\TreeCounter.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport './TreeCounter.css';\nimport axios from 'axios';\nimport apiEndpoints from \"../config/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TreeCounter() {\n  _s();\n  const [count, setCount] = useState(0); // Total count for animation\n  const [baseCount, setBaseCount] = useState(0); // Base count\n  const [donationCount, setDonationCount] = useState(0); // Count from donations\n  const [totalDonations, setTotalDonations] = useState(0); // Total donation amount\n  const [finalCount, setFinalCount] = useState(0); // Total final count\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [animationComplete, setAnimationComplete] = useState(false);\n  const animationDuration = 2000; // Duration in milliseconds\n  const animationRef = useRef(null);\n  const startTimeRef = useRef(null);\n\n  // Function to animate count from 0 to final number\n  const animateCount = timestamp => {\n    if (!startTimeRef.current) {\n      startTimeRef.current = timestamp;\n    }\n    const elapsed = timestamp - startTimeRef.current;\n    const progress = Math.min(elapsed / animationDuration, 1);\n    const currentCount = Math.floor(progress * finalCount);\n    setCount(currentCount);\n    if (progress < 1) {\n      animationRef.current = requestAnimationFrame(animateCount);\n    } else {\n      setCount(finalCount);\n      setAnimationComplete(true);\n      startTimeRef.current = null;\n    }\n  };\n\n  // Function to start the animation\n  const startAnimation = targetCount => {\n    setCount(0);\n    setAnimationComplete(false);\n    setFinalCount(targetCount);\n    if (animationRef.current) {\n      cancelAnimationFrame(animationRef.current);\n    }\n    animationRef.current = requestAnimationFrame(animateCount);\n  };\n\n  // Function to fetch tree count from the server\n  const fetchTreeCount = async () => {\n    try {\n      setLoading(true);\n      console.log('Fetching tree count from:', apiEndpoints.treeCount);\n      const response = await axios.get(apiEndpoints.treeCount);\n      console.log('Tree count response:', response.data);\n\n      // Check for count property and other details\n      if (response.data) {\n        // Get the donation count (trees from donations)\n        const fromDonations = response.data.fromDonations || 0;\n        const donationsAmount = response.data.totalDonations || 0;\n        console.log(`Trees from donations: ${fromDonations}, Total donations: ${donationsAmount}`);\n\n        // Set donation data\n        setDonationCount(fromDonations);\n        setTotalDonations(donationsAmount);\n\n        // For the main animated count, just use donation trees (NOT including base count)\n        // This is what needs to change - we want to animate just the donation-based trees\n        if (!animationComplete) {\n          // If this is the first load, animate from 0 to the donation trees\n          startAnimation(fromDonations);\n        } else {\n          // If animation already happened, just update the count\n          setFinalCount(fromDonations);\n          setCount(fromDonations);\n        }\n        setError(null);\n      } else {\n        // Handle case where no data was returned\n        console.error('Invalid response format:', response.data);\n        setError('Invalid tree count data');\n      }\n    } catch (error) {\n      console.error('Error fetching tree count:', error);\n      setError('Could not update tree count');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    // Start by fetching the initial tree count\n    fetchTreeCount();\n\n    // Set an interval to fetch the updated tree count every 30 seconds\n    const intervalId = setInterval(() => {\n      fetchTreeCount();\n    }, 30000); // Update every 30 seconds\n\n    // Clean up\n    return () => {\n      clearInterval(intervalId);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, []); // Empty dependency array so this runs only once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-counter-container\",\n    children: [loading && !animationComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-counter-loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 41\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-counter-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tree-counter-count\",\n        title: error ? 'Unable to update count' : 'Trees from donations',\n        children: [count.toLocaleString(), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tree-counter-label\",\n        children: \"Trees Planted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), donationCount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-counter-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-counter-detail-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"detail-label\",\n          children: \"From Donations:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"detail-value\",\n          children: [donationCount.toLocaleString(), \" trees\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-counter-detail-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"detail-label\",\n          children: \"Donation Amount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"detail-value\",\n          children: [totalDonations.toLocaleString(), \" INR\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tree-counter-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(TreeCounter, \"0ZcfetWuKGc/lZBLKtG4+AXtrTU=\");\n_c = TreeCounter;\nexport default TreeCounter;\nvar _c;\n$RefreshReg$(_c, \"TreeCounter\");","map":{"version":3,"names":["React","useEffect","useState","useRef","axios","apiEndpoints","jsxDEV","_jsxDEV","TreeCounter","_s","count","setCount","baseCount","setBaseCount","donationCount","setDonationCount","totalDonations","setTotalDonations","finalCount","setFinalCount","loading","setLoading","error","setError","animationComplete","setAnimationComplete","animationDuration","animationRef","startTimeRef","animateCount","timestamp","current","elapsed","progress","Math","min","currentCount","floor","requestAnimationFrame","startAnimation","targetCount","cancelAnimationFrame","fetchTreeCount","console","log","treeCount","response","get","data","fromDonations","donationsAmount","intervalId","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","toLocaleString","_c","$RefreshReg$"],"sources":["D:/All Projects/CrowdFundingWebsite/ecf2/src/components/TreeCounter.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport './TreeCounter.css'; \nimport axios from 'axios';\nimport apiEndpoints from \"../config/api\";\n\nfunction TreeCounter() {\n  const [count, setCount] = useState(0); // Total count for animation\n  const [baseCount, setBaseCount] = useState(0); // Base count\n  const [donationCount, setDonationCount] = useState(0); // Count from donations\n  const [totalDonations, setTotalDonations] = useState(0); // Total donation amount\n  const [finalCount, setFinalCount] = useState(0); // Total final count\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [animationComplete, setAnimationComplete] = useState(false);\n  const animationDuration = 2000; // Duration in milliseconds\n  const animationRef = useRef(null);\n  const startTimeRef = useRef(null);\n\n  // Function to animate count from 0 to final number\n  const animateCount = (timestamp) => {\n    if (!startTimeRef.current) {\n      startTimeRef.current = timestamp;\n    }\n    \n    const elapsed = timestamp - startTimeRef.current;\n    const progress = Math.min(elapsed / animationDuration, 1);\n    \n    const currentCount = Math.floor(progress * finalCount);\n    setCount(currentCount);\n    \n    if (progress < 1) {\n      animationRef.current = requestAnimationFrame(animateCount);\n    } else {\n      setCount(finalCount);\n      setAnimationComplete(true);\n      startTimeRef.current = null;\n    }\n  };\n\n  // Function to start the animation\n  const startAnimation = (targetCount) => {\n    setCount(0);\n    setAnimationComplete(false);\n    setFinalCount(targetCount);\n    \n    if (animationRef.current) {\n      cancelAnimationFrame(animationRef.current);\n    }\n    \n    animationRef.current = requestAnimationFrame(animateCount);\n  };\n\n  // Function to fetch tree count from the server\n  const fetchTreeCount = async () => {\n    try {\n      setLoading(true);\n      console.log('Fetching tree count from:', apiEndpoints.treeCount);\n      const response = await axios.get(apiEndpoints.treeCount);\n      console.log('Tree count response:', response.data);\n      \n      // Check for count property and other details\n      if (response.data) {\n        // Get the donation count (trees from donations)\n        const fromDonations = response.data.fromDonations || 0;\n        const donationsAmount = response.data.totalDonations || 0;\n        \n        console.log(`Trees from donations: ${fromDonations}, Total donations: ${donationsAmount}`);\n        \n        // Set donation data\n        setDonationCount(fromDonations);\n        setTotalDonations(donationsAmount);\n        \n        // For the main animated count, just use donation trees (NOT including base count)\n        // This is what needs to change - we want to animate just the donation-based trees\n        if (!animationComplete) {\n          // If this is the first load, animate from 0 to the donation trees\n          startAnimation(fromDonations);\n        } else {\n          // If animation already happened, just update the count\n          setFinalCount(fromDonations);\n          setCount(fromDonations);\n        }\n        setError(null);\n      } else {\n        // Handle case where no data was returned\n        console.error('Invalid response format:', response.data);\n        setError('Invalid tree count data');\n      }\n    } catch (error) {\n      console.error('Error fetching tree count:', error);\n      setError('Could not update tree count');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Start by fetching the initial tree count\n    fetchTreeCount();\n\n    // Set an interval to fetch the updated tree count every 30 seconds\n    const intervalId = setInterval(() => {\n      fetchTreeCount();\n    }, 30000); // Update every 30 seconds\n\n    // Clean up\n    return () => {\n      clearInterval(intervalId);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, []); // Empty dependency array so this runs only once when the component mounts\n\n  return (\n    <div className=\"tree-counter-container\">\n      {loading && !animationComplete && <div className=\"tree-counter-loading\">Loading...</div>}\n      \n      <div className=\"tree-counter-main\">\n        <span className=\"tree-counter-count\" title={error ? 'Unable to update count' : 'Trees from donations'}>\n          {count.toLocaleString()} {/* Display the number with commas */}\n        </span>\n        <span className=\"tree-counter-label\">Trees Planted</span>\n      </div>\n      \n      {donationCount > 0 && (\n        <div className=\"tree-counter-details\">\n          <div className=\"tree-counter-detail-item\">\n            <span className=\"detail-label\">From Donations:</span>\n            <span className=\"detail-value\">{donationCount.toLocaleString()} trees</span>\n          </div>\n          <div className=\"tree-counter-detail-item\">\n            <span className=\"detail-label\">Donation Amount:</span>\n            <span className=\"detail-value\">{totalDonations.toLocaleString()} INR</span>\n          </div>\n        </div>\n      )}\n      \n      {error && <span className=\"tree-counter-error\">{error}</span>}\n    </div>\n  );\n}\n\nexport default TreeCounter;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}