{"ast":null,"code":"var _jsxFileName = \"E:\\\\Programming\\\\Projects\\\\FSD-Sem4-Project\\\\ecf2\\\\src\\\\components\\\\TreeCounter.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './TreeCounter.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TreeCounter() {\n  _s();\n  const [count, setCount] = useState(0);\n  const finalCount = 245136420; // Initial count (the final goal)\n\n  // Function to fetch tree count from the server\n  const fetchTreeCount = async () => {\n    try {\n      const response = await axios.get('https://crowd-funding-back-production.up.railway.app/treeCount');\n      setCount(response.data.treeCount); // Update state with the fetched count\n    } catch (error) {\n      console.error('Error fetching tree count:', error);\n    }\n  };\n  useEffect(() => {\n    // Start by fetching the initial tree count\n    fetchTreeCount();\n\n    // Set an interval to fetch the updated tree count every 30 seconds\n    const intervalId = setInterval(() => {\n      fetchTreeCount();\n    }, 30000); // Update every 30 seconds (you can adjust this as needed)\n\n    return () => clearInterval(intervalId); // Cleanup interval on component unmount\n  }, []); // Empty dependency array so this runs only once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-counter-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tree-counter-count\",\n      children: [count.toLocaleString(), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tree-counter-label\",\n      children: \"Trees Planted\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(TreeCounter, \"/xL7qdScToREtqzbt5GZ1kHtYjQ=\");\n_c = TreeCounter;\nexport default TreeCounter;\nvar _c;\n$RefreshReg$(_c, \"TreeCounter\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","TreeCounter","_s","count","setCount","finalCount","fetchTreeCount","response","get","data","treeCount","error","console","intervalId","setInterval","clearInterval","className","children","toLocaleString","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Programming/Projects/FSD-Sem4-Project/ecf2/src/components/TreeCounter.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './TreeCounter.css'; \r\nimport axios from 'axios';\r\n\r\nfunction TreeCounter() {\r\n  const [count, setCount] = useState(0);\r\n  const finalCount = 245136420; // Initial count (the final goal)\r\n\r\n  // Function to fetch tree count from the server\r\n  const fetchTreeCount = async () => {\r\n    try {\r\n      const response = await axios.get('https://crowd-funding-back-production.up.railway.app/treeCount');\r\n      setCount(response.data.treeCount); // Update state with the fetched count\r\n    } catch (error) {\r\n      console.error('Error fetching tree count:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Start by fetching the initial tree count\r\n    fetchTreeCount();\r\n\r\n    // Set an interval to fetch the updated tree count every 30 seconds\r\n    const intervalId = setInterval(() => {\r\n      fetchTreeCount();\r\n    }, 30000); // Update every 30 seconds (you can adjust this as needed)\r\n\r\n    return () => clearInterval(intervalId); // Cleanup interval on component unmount\r\n  }, []); // Empty dependency array so this runs only once when the component mounts\r\n\r\n  return (\r\n    <div className=\"tree-counter-container\">\r\n      <span className=\"tree-counter-count\">\r\n        {count.toLocaleString()} {/* Display the number with commas */}\r\n      </span>\r\n      <span className=\"tree-counter-label\">Trees Planted</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TreeCounter;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,mBAAmB;AAC1B,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAMQ,UAAU,GAAG,SAAS,CAAC,CAAC;;EAE9B;EACA,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,gEAAgE,CAAC;MAClGJ,QAAQ,CAACG,QAAQ,CAACE,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;IACrC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC;EAEDf,SAAS,CAAC,MAAM;IACd;IACAU,cAAc,CAAC,CAAC;;IAEhB;IACA,MAAMO,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnCR,cAAc,CAAC,CAAC;IAClB,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEX,OAAO,MAAMS,aAAa,CAACF,UAAU,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEb,OAAA;IAAKgB,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACrCjB,OAAA;MAAMgB,SAAS,EAAC,oBAAoB;MAAAC,QAAA,GACjCd,KAAK,CAACe,cAAc,CAAC,CAAC,EAAC,GAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CAAC,eACPtB,OAAA;MAAMgB,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAAC;IAAa;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEV;AAACpB,EAAA,CAlCQD,WAAW;AAAAsB,EAAA,GAAXtB,WAAW;AAoCpB,eAAeA,WAAW;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}