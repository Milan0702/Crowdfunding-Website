{"ast":null,"code":"var _jsxFileName = \"D:\\\\All Projects\\\\CrowdFundingWebsite\\\\ecf2\\\\src\\\\components\\\\TreeCounter.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport './TreeCounter.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TreeCounter() {\n  _s();\n  const [count, setCount] = useState(0); // Start at 0 for animation\n  const [finalCount, setFinalCount] = useState(245136420); // Initial default count\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [animationComplete, setAnimationComplete] = useState(false);\n  const animationDuration = 2000; // Duration in milliseconds\n  const animationRef = useRef(null);\n  const startTimeRef = useRef(null);\n\n  // Function to animate count from 0 to final number\n  const animateCount = timestamp => {\n    if (!startTimeRef.current) {\n      startTimeRef.current = timestamp;\n    }\n    const elapsed = timestamp - startTimeRef.current;\n    const progress = Math.min(elapsed / animationDuration, 1);\n    const currentCount = Math.floor(progress * finalCount);\n    setCount(currentCount);\n    if (progress < 1) {\n      animationRef.current = requestAnimationFrame(animateCount);\n    } else {\n      setCount(finalCount);\n      setAnimationComplete(true);\n      startTimeRef.current = null;\n    }\n  };\n\n  // Function to start the animation\n  const startAnimation = targetCount => {\n    setCount(0);\n    setAnimationComplete(false);\n    setFinalCount(targetCount);\n    if (animationRef.current) {\n      cancelAnimationFrame(animationRef.current);\n    }\n    animationRef.current = requestAnimationFrame(animateCount);\n  };\n\n  // Function to fetch tree count from the server\n  const fetchTreeCount = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('https://crowd-funding-back-production.up.railway.app/api/treeCount');\n      if (response.data && response.data.treeCount) {\n        if (!animationComplete) {\n          // If this is the first load, animate from 0 to the fetched count\n          startAnimation(response.data.treeCount);\n        } else {\n          // If animation already happened, just update the count\n          setFinalCount(response.data.treeCount);\n          setCount(response.data.treeCount);\n        }\n        setError(null);\n      }\n    } catch (error) {\n      console.error('Error fetching tree count:', error);\n      setError('Could not update tree count');\n\n      // Start animation with the default count if no animation has run yet\n      if (!animationComplete) {\n        startAnimation(finalCount);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    // Start by fetching the initial tree count\n    fetchTreeCount();\n\n    // Set an interval to fetch the updated tree count every 30 seconds\n    const intervalId = setInterval(() => {\n      fetchTreeCount();\n    }, 30000); // Update every 30 seconds (you can adjust this as needed)\n\n    // Clean up\n    return () => {\n      clearInterval(intervalId);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, []); // Empty dependency array so this runs only once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-counter-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tree-counter-count\",\n      title: error ? 'Unable to update count' : 'Live tree count',\n      children: [count.toLocaleString(), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tree-counter-label\",\n      children: \"Trees Planted\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tree-counter-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(TreeCounter, \"f8YHLbMNbbaH/+Bawpx3SVwg1Do=\");\n_c = TreeCounter;\nexport default TreeCounter;\nvar _c;\n$RefreshReg$(_c, \"TreeCounter\");","map":{"version":3,"names":["React","useEffect","useState","useRef","axios","jsxDEV","_jsxDEV","TreeCounter","_s","count","setCount","finalCount","setFinalCount","loading","setLoading","error","setError","animationComplete","setAnimationComplete","animationDuration","animationRef","startTimeRef","animateCount","timestamp","current","elapsed","progress","Math","min","currentCount","floor","requestAnimationFrame","startAnimation","targetCount","cancelAnimationFrame","fetchTreeCount","response","get","data","treeCount","console","intervalId","setInterval","clearInterval","className","children","title","toLocaleString","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/All Projects/CrowdFundingWebsite/ecf2/src/components/TreeCounter.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport './TreeCounter.css'; \nimport axios from 'axios';\n\nfunction TreeCounter() {\n  const [count, setCount] = useState(0); // Start at 0 for animation\n  const [finalCount, setFinalCount] = useState(245136420); // Initial default count\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [animationComplete, setAnimationComplete] = useState(false);\n  const animationDuration = 2000; // Duration in milliseconds\n  const animationRef = useRef(null);\n  const startTimeRef = useRef(null);\n\n  // Function to animate count from 0 to final number\n  const animateCount = (timestamp) => {\n    if (!startTimeRef.current) {\n      startTimeRef.current = timestamp;\n    }\n    \n    const elapsed = timestamp - startTimeRef.current;\n    const progress = Math.min(elapsed / animationDuration, 1);\n    \n    const currentCount = Math.floor(progress * finalCount);\n    setCount(currentCount);\n    \n    if (progress < 1) {\n      animationRef.current = requestAnimationFrame(animateCount);\n    } else {\n      setCount(finalCount);\n      setAnimationComplete(true);\n      startTimeRef.current = null;\n    }\n  };\n\n  // Function to start the animation\n  const startAnimation = (targetCount) => {\n    setCount(0);\n    setAnimationComplete(false);\n    setFinalCount(targetCount);\n    \n    if (animationRef.current) {\n      cancelAnimationFrame(animationRef.current);\n    }\n    \n    animationRef.current = requestAnimationFrame(animateCount);\n  };\n\n  // Function to fetch tree count from the server\n  const fetchTreeCount = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('https://crowd-funding-back-production.up.railway.app/api/treeCount');\n      if (response.data && response.data.treeCount) {\n        if (!animationComplete) {\n          // If this is the first load, animate from 0 to the fetched count\n          startAnimation(response.data.treeCount);\n        } else {\n          // If animation already happened, just update the count\n          setFinalCount(response.data.treeCount);\n          setCount(response.data.treeCount);\n        }\n        setError(null);\n      }\n    } catch (error) {\n      console.error('Error fetching tree count:', error);\n      setError('Could not update tree count');\n      \n      // Start animation with the default count if no animation has run yet\n      if (!animationComplete) {\n        startAnimation(finalCount);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Start by fetching the initial tree count\n    fetchTreeCount();\n\n    // Set an interval to fetch the updated tree count every 30 seconds\n    const intervalId = setInterval(() => {\n      fetchTreeCount();\n    }, 30000); // Update every 30 seconds (you can adjust this as needed)\n\n    // Clean up\n    return () => {\n      clearInterval(intervalId);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, []); // Empty dependency array so this runs only once when the component mounts\n\n  return (\n    <div className=\"tree-counter-container\">\n      <span className=\"tree-counter-count\" title={error ? 'Unable to update count' : 'Live tree count'}>\n        {count.toLocaleString()} {/* Display the number with commas */}\n      </span>\n      <span className=\"tree-counter-label\">Trees Planted</span>\n      {error && <span className=\"tree-counter-error\">{error}</span>}\n    </div>\n  );\n}\n\nexport default TreeCounter;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,mBAAmB;AAC1B,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;EACzD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACe,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAMiB,iBAAiB,GAAG,IAAI,CAAC,CAAC;EAChC,MAAMC,YAAY,GAAGjB,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMkB,YAAY,GAAGlB,MAAM,CAAC,IAAI,CAAC;;EAEjC;EACA,MAAMmB,YAAY,GAAIC,SAAS,IAAK;IAClC,IAAI,CAACF,YAAY,CAACG,OAAO,EAAE;MACzBH,YAAY,CAACG,OAAO,GAAGD,SAAS;IAClC;IAEA,MAAME,OAAO,GAAGF,SAAS,GAAGF,YAAY,CAACG,OAAO;IAChD,MAAME,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACH,OAAO,GAAGN,iBAAiB,EAAE,CAAC,CAAC;IAEzD,MAAMU,YAAY,GAAGF,IAAI,CAACG,KAAK,CAACJ,QAAQ,GAAGf,UAAU,CAAC;IACtDD,QAAQ,CAACmB,YAAY,CAAC;IAEtB,IAAIH,QAAQ,GAAG,CAAC,EAAE;MAChBN,YAAY,CAACI,OAAO,GAAGO,qBAAqB,CAACT,YAAY,CAAC;IAC5D,CAAC,MAAM;MACLZ,QAAQ,CAACC,UAAU,CAAC;MACpBO,oBAAoB,CAAC,IAAI,CAAC;MAC1BG,YAAY,CAACG,OAAO,GAAG,IAAI;IAC7B;EACF,CAAC;;EAED;EACA,MAAMQ,cAAc,GAAIC,WAAW,IAAK;IACtCvB,QAAQ,CAAC,CAAC,CAAC;IACXQ,oBAAoB,CAAC,KAAK,CAAC;IAC3BN,aAAa,CAACqB,WAAW,CAAC;IAE1B,IAAIb,YAAY,CAACI,OAAO,EAAE;MACxBU,oBAAoB,CAACd,YAAY,CAACI,OAAO,CAAC;IAC5C;IAEAJ,YAAY,CAACI,OAAO,GAAGO,qBAAqB,CAACT,YAAY,CAAC;EAC5D,CAAC;;EAED;EACA,MAAMa,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACFrB,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMsB,QAAQ,GAAG,MAAMhC,KAAK,CAACiC,GAAG,CAAC,oEAAoE,CAAC;MACtG,IAAID,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACC,SAAS,EAAE;QAC5C,IAAI,CAACtB,iBAAiB,EAAE;UACtB;UACAe,cAAc,CAACI,QAAQ,CAACE,IAAI,CAACC,SAAS,CAAC;QACzC,CAAC,MAAM;UACL;UACA3B,aAAa,CAACwB,QAAQ,CAACE,IAAI,CAACC,SAAS,CAAC;UACtC7B,QAAQ,CAAC0B,QAAQ,CAACE,IAAI,CAACC,SAAS,CAAC;QACnC;QACAvB,QAAQ,CAAC,IAAI,CAAC;MAChB;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdyB,OAAO,CAACzB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDC,QAAQ,CAAC,6BAA6B,CAAC;;MAEvC;MACA,IAAI,CAACC,iBAAiB,EAAE;QACtBe,cAAc,CAACrB,UAAU,CAAC;MAC5B;IACF,CAAC,SAAS;MACRG,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDb,SAAS,CAAC,MAAM;IACd;IACAkC,cAAc,CAAC,CAAC;;IAEhB;IACA,MAAMM,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnCP,cAAc,CAAC,CAAC;IAClB,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEX;IACA,OAAO,MAAM;MACXQ,aAAa,CAACF,UAAU,CAAC;MACzB,IAAIrB,YAAY,CAACI,OAAO,EAAE;QACxBU,oBAAoB,CAACd,YAAY,CAACI,OAAO,CAAC;MAC5C;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACElB,OAAA;IAAKsC,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACrCvC,OAAA;MAAMsC,SAAS,EAAC,oBAAoB;MAACE,KAAK,EAAE/B,KAAK,GAAG,wBAAwB,GAAG,iBAAkB;MAAA8B,QAAA,GAC9FpC,KAAK,CAACsC,cAAc,CAAC,CAAC,EAAC,GAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CAAC,eACP7C,OAAA;MAAMsC,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAAC;IAAa;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EACxDpC,KAAK,iBAAIT,OAAA;MAAMsC,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAAE9B;IAAK;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEV;AAAC3C,EAAA,CApGQD,WAAW;AAAA6C,EAAA,GAAX7C,WAAW;AAsGpB,eAAeA,WAAW;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}