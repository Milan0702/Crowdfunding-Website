{"ast":null,"code":"var _jsxFileName = \"D:\\\\All Projects\\\\CrowdFundingWebsite\\\\ecf2\\\\src\\\\components\\\\TreeCounter.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './TreeCounter.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TreeCounter() {\n  _s();\n  const [count, setCount] = useState(245136420); // Initial default count\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Function to fetch tree count from the server\n  const fetchTreeCount = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('https://crowd-funding-back-production.up.railway.app/api/treeCount');\n      if (response.data && response.data.treeCount) {\n        setCount(response.data.treeCount);\n        setError(null);\n      }\n    } catch (error) {\n      console.error('Error fetching tree count:', error);\n      setError('Could not update tree count');\n      // Keep using the existing count, don't reset it\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    // Start by fetching the initial tree count\n    fetchTreeCount();\n\n    // Set an interval to fetch the updated tree count every 30 seconds\n    const intervalId = setInterval(() => {\n      fetchTreeCount();\n    }, 30000); // Update every 30 seconds (you can adjust this as needed)\n\n    return () => clearInterval(intervalId); // Cleanup interval on component unmount\n  }, []); // Empty dependency array so this runs only once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-counter-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tree-counter-count\",\n      title: error ? 'Unable to update count' : 'Live tree count',\n      children: [count.toLocaleString(), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tree-counter-label\",\n      children: \"Trees Planted\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tree-counter-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(TreeCounter, \"f8+HEYwHIyfFLRBaXwOE7Y6S5j8=\");\n_c = TreeCounter;\nexport default TreeCounter;\nvar _c;\n$RefreshReg$(_c, \"TreeCounter\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","TreeCounter","_s","count","setCount","loading","setLoading","error","setError","fetchTreeCount","response","get","data","treeCount","console","intervalId","setInterval","clearInterval","className","children","title","toLocaleString","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/All Projects/CrowdFundingWebsite/ecf2/src/components/TreeCounter.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './TreeCounter.css'; \nimport axios from 'axios';\n\nfunction TreeCounter() {\n  const [count, setCount] = useState(245136420); // Initial default count\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Function to fetch tree count from the server\n  const fetchTreeCount = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('https://crowd-funding-back-production.up.railway.app/api/treeCount');\n      if (response.data && response.data.treeCount) {\n        setCount(response.data.treeCount);\n        setError(null);\n      }\n    } catch (error) {\n      console.error('Error fetching tree count:', error);\n      setError('Could not update tree count');\n      // Keep using the existing count, don't reset it\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Start by fetching the initial tree count\n    fetchTreeCount();\n\n    // Set an interval to fetch the updated tree count every 30 seconds\n    const intervalId = setInterval(() => {\n      fetchTreeCount();\n    }, 30000); // Update every 30 seconds (you can adjust this as needed)\n\n    return () => clearInterval(intervalId); // Cleanup interval on component unmount\n  }, []); // Empty dependency array so this runs only once when the component mounts\n\n  return (\n    <div className=\"tree-counter-container\">\n      <span className=\"tree-counter-count\" title={error ? 'Unable to update count' : 'Live tree count'}>\n        {count.toLocaleString()} {/* Display the number with commas */}\n      </span>\n      <span className=\"tree-counter-label\">Trees Planted</span>\n      {error && <span className=\"tree-counter-error\">{error}</span>}\n    </div>\n  );\n}\n\nexport default TreeCounter;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,mBAAmB;AAC1B,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMY,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACFH,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMI,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,oEAAoE,CAAC;MACtG,IAAID,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACC,SAAS,EAAE;QAC5CT,QAAQ,CAACM,QAAQ,CAACE,IAAI,CAACC,SAAS,CAAC;QACjCL,QAAQ,CAAC,IAAI,CAAC;MAChB;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDC,QAAQ,CAAC,6BAA6B,CAAC;MACvC;IACF,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDV,SAAS,CAAC,MAAM;IACd;IACAa,cAAc,CAAC,CAAC;;IAEhB;IACA,MAAMM,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnCP,cAAc,CAAC,CAAC;IAClB,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEX,OAAO,MAAMQ,aAAa,CAACF,UAAU,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEf,OAAA;IAAKkB,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACrCnB,OAAA;MAAMkB,SAAS,EAAC,oBAAoB;MAACE,KAAK,EAAEb,KAAK,GAAG,wBAAwB,GAAG,iBAAkB;MAAAY,QAAA,GAC9FhB,KAAK,CAACkB,cAAc,CAAC,CAAC,EAAC,GAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CAAC,eACPzB,OAAA;MAAMkB,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAAC;IAAa;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EACxDlB,KAAK,iBAAIP,OAAA;MAAMkB,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAAEZ;IAAK;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEV;AAACvB,EAAA,CA5CQD,WAAW;AAAAyB,EAAA,GAAXzB,WAAW;AA8CpB,eAAeA,WAAW;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}