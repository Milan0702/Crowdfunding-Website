{"ast":null,"code":"var _jsxFileName = \"D:\\\\All Projects\\\\CrowdFundingWebsite\\\\ecf2\\\\src\\\\components\\\\TreeCounter.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport './TreeCounter.css';\nimport axios from 'axios';\nimport apiEndpoints from \"../config/api\";\n\n// Base tree count (same as backend)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_TREE_COUNT = 245136420;\nfunction TreeCounter() {\n  _s();\n  // State for tree counter data\n  const [treeCount, setTreeCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [treesFromDonations, setTreesFromDonations] = useState(0);\n  const [totalDonations, setTotalDonations] = useState(0);\n\n  // Refs for animation\n  const animationRef = useRef(null);\n  const startTimeRef = useRef(null);\n  const targetCountRef = useRef(0);\n  const animated = useRef(false); // Track if we've already animated once\n  const observer = useRef(null);\n  const counterRef = useRef(null);\n\n  // Animation settings\n  const ANIMATION_DURATION = 3000; // 3 seconds for animation\n\n  // Function to animate the counter\n  const animateCount = timestamp => {\n    if (!startTimeRef.current) {\n      startTimeRef.current = timestamp;\n    }\n    const elapsed = timestamp - startTimeRef.current;\n    const progress = Math.min(elapsed / ANIMATION_DURATION, 1);\n\n    // Easing function for smoother animation (ease-out)\n    const easedProgress = 1 - Math.pow(1 - progress, 3);\n\n    // Calculate current count with easing\n    const currentCount = Math.floor(easedProgress * targetCountRef.current);\n    setTreeCount(currentCount);\n    if (progress < 1) {\n      // Continue animation\n      animationRef.current = requestAnimationFrame(animateCount);\n    } else {\n      // Animation complete\n      setTreeCount(targetCountRef.current);\n      startTimeRef.current = null;\n      animated.current = true;\n    }\n  };\n\n  // Function to start animation\n  const startAnimation = targetCount => {\n    // Set target count\n    targetCountRef.current = targetCount;\n\n    // Reset animation\n    if (animationRef.current) {\n      cancelAnimationFrame(animationRef.current);\n    }\n\n    // Start from 0 only if this is the first animation\n    if (!animated.current) {\n      setTreeCount(0);\n    } else {\n      // For subsequent animations (after donations), \n      // we already have a value so don't reset to 0\n    }\n\n    // Start animation\n    animationRef.current = requestAnimationFrame(animateCount);\n  };\n\n  // Function to fetch tree count data\n  const fetchTreeCount = async () => {\n    try {\n      setIsLoading(true);\n\n      // Add cache-busting parameter\n      const url = `${apiEndpoints.treeCount}?_t=${Date.now()}`;\n      const response = await axios.get(url);\n      if (response.data) {\n        const {\n          count,\n          fromDonations,\n          totalDonations: donationsAmount\n        } = response.data;\n\n        // Store values\n        setTreesFromDonations(fromDonations);\n        setTotalDonations(donationsAmount);\n\n        // Start animation if not already animated\n        if (!animated.current) {\n          startAnimation(fromDonations);\n        } else if (fromDonations !== treesFromDonations) {\n          // If donation count changed, animate to new value\n          startAnimation(fromDonations);\n        } else {\n          // No change, just update the value\n          setTreeCount(fromDonations);\n        }\n        setError(null);\n      } else {\n        setError('Invalid response data');\n      }\n    } catch (err) {\n      console.error('Error fetching tree count:', err);\n      setError('Failed to load tree count');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Set up Intersection Observer to trigger animation when counter is visible\n  useEffect(() => {\n    // Create observer to detect when counter is visible\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && !animated.current) {\n        // Element is now visible and not yet animated\n        fetchTreeCount();\n      }\n    }, {\n      threshold: 0.1\n    }); // Trigger when at least 10% visible\n\n    // Start observing the counter element\n    if (counterRef.current) {\n      observer.current.observe(counterRef.current);\n    }\n\n    // Set up polling for changes (every 30 seconds)\n    const intervalId = setInterval(() => {\n      fetchTreeCount();\n    }, 30000); // Check every 30 seconds\n\n    // Set up event listener for when user returns to the page\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible') {\n        fetchTreeCount();\n      }\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    // Clean up\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n      if (observer.current && counterRef.current) {\n        observer.current.unobserve(counterRef.current);\n      }\n      clearInterval(intervalId);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-counter-container\",\n    ref: counterRef,\n    children: [isLoading && !animated.current && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-counter-loading\",\n      children: \"Loading trees...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-counter-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tree-counter-count\",\n        title: \"Trees planted from donations\",\n        children: treeCount.toLocaleString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tree-counter-label\",\n        children: \"Trees Planted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), treesFromDonations > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-counter-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-counter-detail-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"detail-label\",\n          children: \"From Donations:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"detail-value\",\n          children: [treesFromDonations.toLocaleString(), \" trees\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-counter-detail-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"detail-label\",\n          children: \"Donation Amount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"detail-value\",\n          children: [totalDonations.toLocaleString(), \" INR\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tree-counter-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n_s(TreeCounter, \"/51Sq6H/IZB7fL4pRwxV9zAwc7Q=\");\n_c = TreeCounter;\nexport default TreeCounter;\nvar _c;\n$RefreshReg$(_c, \"TreeCounter\");","map":{"version":3,"names":["React","useEffect","useState","useRef","axios","apiEndpoints","jsxDEV","_jsxDEV","BASE_TREE_COUNT","TreeCounter","_s","treeCount","setTreeCount","isLoading","setIsLoading","error","setError","treesFromDonations","setTreesFromDonations","totalDonations","setTotalDonations","animationRef","startTimeRef","targetCountRef","animated","observer","counterRef","ANIMATION_DURATION","animateCount","timestamp","current","elapsed","progress","Math","min","easedProgress","pow","currentCount","floor","requestAnimationFrame","startAnimation","targetCount","cancelAnimationFrame","fetchTreeCount","url","Date","now","response","get","data","count","fromDonations","donationsAmount","err","console","IntersectionObserver","entries","isIntersecting","threshold","observe","intervalId","setInterval","handleVisibilityChange","document","visibilityState","addEventListener","unobserve","clearInterval","removeEventListener","className","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","title","toLocaleString","_c","$RefreshReg$"],"sources":["D:/All Projects/CrowdFundingWebsite/ecf2/src/components/TreeCounter.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport './TreeCounter.css'; \nimport axios from 'axios';\nimport apiEndpoints from \"../config/api\";\n\n// Base tree count (same as backend)\nconst BASE_TREE_COUNT = 245136420;\n\nfunction TreeCounter() {\n  // State for tree counter data\n  const [treeCount, setTreeCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [treesFromDonations, setTreesFromDonations] = useState(0);\n  const [totalDonations, setTotalDonations] = useState(0);\n  \n  // Refs for animation\n  const animationRef = useRef(null);\n  const startTimeRef = useRef(null);\n  const targetCountRef = useRef(0);\n  const animated = useRef(false); // Track if we've already animated once\n  const observer = useRef(null);\n  const counterRef = useRef(null);\n  \n  // Animation settings\n  const ANIMATION_DURATION = 3000; // 3 seconds for animation\n\n  // Function to animate the counter\n  const animateCount = (timestamp) => {\n    if (!startTimeRef.current) {\n      startTimeRef.current = timestamp;\n    }\n    \n    const elapsed = timestamp - startTimeRef.current;\n    const progress = Math.min(elapsed / ANIMATION_DURATION, 1);\n    \n    // Easing function for smoother animation (ease-out)\n    const easedProgress = 1 - Math.pow(1 - progress, 3);\n    \n    // Calculate current count with easing\n    const currentCount = Math.floor(easedProgress * targetCountRef.current);\n    setTreeCount(currentCount);\n    \n    if (progress < 1) {\n      // Continue animation\n      animationRef.current = requestAnimationFrame(animateCount);\n    } else {\n      // Animation complete\n      setTreeCount(targetCountRef.current);\n      startTimeRef.current = null;\n      animated.current = true;\n    }\n  };\n\n  // Function to start animation\n  const startAnimation = (targetCount) => {\n    // Set target count\n    targetCountRef.current = targetCount;\n    \n    // Reset animation\n    if (animationRef.current) {\n      cancelAnimationFrame(animationRef.current);\n    }\n    \n    // Start from 0 only if this is the first animation\n    if (!animated.current) {\n      setTreeCount(0);\n    } else {\n      // For subsequent animations (after donations), \n      // we already have a value so don't reset to 0\n    }\n    \n    // Start animation\n    animationRef.current = requestAnimationFrame(animateCount);\n  };\n\n  // Function to fetch tree count data\n  const fetchTreeCount = async () => {\n    try {\n      setIsLoading(true);\n      \n      // Add cache-busting parameter\n      const url = `${apiEndpoints.treeCount}?_t=${Date.now()}`;\n      const response = await axios.get(url);\n      \n      if (response.data) {\n        const { count, fromDonations, totalDonations: donationsAmount } = response.data;\n        \n        // Store values\n        setTreesFromDonations(fromDonations);\n        setTotalDonations(donationsAmount);\n        \n        // Start animation if not already animated\n        if (!animated.current) {\n          startAnimation(fromDonations);\n        } else if (fromDonations !== treesFromDonations) {\n          // If donation count changed, animate to new value\n          startAnimation(fromDonations);\n        } else {\n          // No change, just update the value\n          setTreeCount(fromDonations);\n        }\n        \n        setError(null);\n      } else {\n        setError('Invalid response data');\n      }\n    } catch (err) {\n      console.error('Error fetching tree count:', err);\n      setError('Failed to load tree count');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Set up Intersection Observer to trigger animation when counter is visible\n  useEffect(() => {\n    // Create observer to detect when counter is visible\n    observer.current = new IntersectionObserver((entries) => {\n      if (entries[0].isIntersecting && !animated.current) {\n        // Element is now visible and not yet animated\n        fetchTreeCount();\n      }\n    }, { threshold: 0.1 }); // Trigger when at least 10% visible\n    \n    // Start observing the counter element\n    if (counterRef.current) {\n      observer.current.observe(counterRef.current);\n    }\n    \n    // Set up polling for changes (every 30 seconds)\n    const intervalId = setInterval(() => {\n      fetchTreeCount();\n    }, 30000); // Check every 30 seconds\n    \n    // Set up event listener for when user returns to the page\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible') {\n        fetchTreeCount();\n      }\n    };\n    \n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n    // Clean up\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n      if (observer.current && counterRef.current) {\n        observer.current.unobserve(counterRef.current);\n      }\n      clearInterval(intervalId);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, []);\n\n  return (\n    <div className=\"tree-counter-container\" ref={counterRef}>\n      {isLoading && !animated.current && (\n        <div className=\"tree-counter-loading\">Loading trees...</div>\n      )}\n      \n      <div className=\"tree-counter-main\">\n        <span className=\"tree-counter-count\" title=\"Trees planted from donations\">\n          {treeCount.toLocaleString()}\n        </span>\n        <span className=\"tree-counter-label\">Trees Planted</span>\n      </div>\n      \n      {treesFromDonations > 0 && (\n        <div className=\"tree-counter-details\">\n          <div className=\"tree-counter-detail-item\">\n            <span className=\"detail-label\">From Donations:</span>\n            <span className=\"detail-value\">{treesFromDonations.toLocaleString()} trees</span>\n          </div>\n          <div className=\"tree-counter-detail-item\">\n            <span className=\"detail-label\">Donation Amount:</span>\n            <span className=\"detail-value\">{totalDonations.toLocaleString()} INR</span>\n          </div>\n        </div>\n      )}\n      \n      {error && <span className=\"tree-counter-error\">{error}</span>}\n    </div>\n  );\n}\n\nexport default TreeCounter;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}