{"ast":null,"code":"var _jsxFileName = \"D:\\\\All Projects\\\\CrowdFundingWebsite\\\\ecf2\\\\src\\\\components\\\\TreeCounter.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport './TreeCounter.css';\nimport axios from 'axios';\nimport apiEndpoints from \"../config/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TreeCounter() {\n  _s();\n  const [count, setCount] = useState(0); // Total count for animation\n  const [donationCount, setDonationCount] = useState(0); // Count from donations\n  const [totalDonations, setTotalDonations] = useState(0); // Total donation amount\n  const [finalCount, setFinalCount] = useState(0); // Total final count\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [animationComplete, setAnimationComplete] = useState(false);\n  const [lastFetchTime, setLastFetchTime] = useState(0); // Track last fetch time\n  const animationDuration = 2000; // Duration in milliseconds\n  const animationRef = useRef(null);\n  const startTimeRef = useRef(null);\n  const previousDonationCount = useRef(0); // Track previous donation count\n\n  // Function to animate count from 0 to final number\n  const animateCount = timestamp => {\n    if (!startTimeRef.current) {\n      startTimeRef.current = timestamp;\n    }\n    const elapsed = timestamp - startTimeRef.current;\n    const progress = Math.min(elapsed / animationDuration, 1);\n    const currentCount = Math.floor(progress * finalCount);\n    setCount(currentCount);\n    if (progress < 1) {\n      animationRef.current = requestAnimationFrame(animateCount);\n    } else {\n      setCount(finalCount);\n      setAnimationComplete(true);\n      startTimeRef.current = null;\n    }\n  };\n\n  // Function to start the animation\n  const startAnimation = targetCount => {\n    console.log(`Starting animation from 0 to ${targetCount}`);\n    setCount(0);\n    setAnimationComplete(false);\n    setFinalCount(targetCount);\n    if (animationRef.current) {\n      cancelAnimationFrame(animationRef.current);\n    }\n    animationRef.current = requestAnimationFrame(animateCount);\n  };\n\n  // Function to fetch tree count from the server\n  const fetchTreeCount = async (forceRefresh = false) => {\n    try {\n      // Only fetch if it's been more than 5 seconds since last fetch, or forced refresh\n      const now = Date.now();\n      if (!forceRefresh && now - lastFetchTime < 5000) {\n        console.log('Skipping fetch - too soon since last fetch');\n        return;\n      }\n      setLastFetchTime(now);\n      setLoading(true);\n      console.log('Fetching tree count from:', apiEndpoints.treeCount);\n\n      // Add cache busting to avoid browser cache\n      const url = `${apiEndpoints.treeCount}?_t=${now}`;\n      const response = await axios.get(url);\n      console.log('Tree count response:', response.data);\n      if (response.data) {\n        // Get the donation count (trees from donations) \n        const fromDonations = response.data.fromDonations || 0;\n        const donationsAmount = response.data.totalDonations || 0;\n        console.log(`Trees from donations: ${fromDonations}, Total donations: ${donationsAmount} INR`);\n\n        // Check if the count has changed\n        const countChanged = fromDonations !== previousDonationCount.current;\n        console.log(`Previous count: ${previousDonationCount.current}, New count: ${fromDonations}, Changed: ${countChanged}`);\n\n        // Update state with the correct values\n        setDonationCount(fromDonations);\n        setTotalDonations(donationsAmount);\n        previousDonationCount.current = fromDonations;\n\n        // Decide whether to animate\n        if (!animationComplete || countChanged) {\n          console.log('Starting animation due to new count or initial load');\n          startAnimation(fromDonations);\n        } else {\n          console.log('Count unchanged, not animating');\n          setFinalCount(fromDonations);\n          setCount(fromDonations);\n        }\n        setError(null);\n      } else {\n        console.error('Invalid response format:', response.data);\n        setError('Invalid tree count data');\n      }\n    } catch (error) {\n      console.error('Error fetching tree count:', error);\n      setError('Could not update tree count');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    // Start by fetching the initial tree count\n    fetchTreeCount(true);\n\n    // Set an interval to fetch the updated tree count every 10 seconds\n    const intervalId = setInterval(() => {\n      fetchTreeCount(true);\n    }, 10000); // Update every 10 seconds\n\n    // Clean up\n    return () => {\n      clearInterval(intervalId);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, []); // Empty dependency array so this runs only once when the component mounts\n\n  // Manual refresh button handler\n  const handleRefresh = () => {\n    fetchTreeCount(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-counter-container\",\n    children: [loading && !animationComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-counter-loading\",\n      children: \"Loading trees...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 41\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-counter-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tree-counter-count\",\n        title: \"Trees planted from donations\",\n        children: count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tree-counter-label\",\n        children: \"Trees Planted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), donationCount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-counter-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-counter-detail-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"detail-label\",\n          children: \"From Donations:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"detail-value\",\n          children: [donationCount, \" trees\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-counter-detail-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"detail-label\",\n          children: \"Donation Amount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"detail-value\",\n          children: [totalDonations.toLocaleString(), \" INR\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tree-counter-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRefresh,\n      className: \"tree-counter-refresh\",\n      children: \"\\u21BB Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n_s(TreeCounter, \"8rt175dGZgetYSD1ca4Lnpsrp7U=\");\n_c = TreeCounter;\nexport default TreeCounter;\nvar _c;\n$RefreshReg$(_c, \"TreeCounter\");","map":{"version":3,"names":["React","useEffect","useState","useRef","axios","apiEndpoints","jsxDEV","_jsxDEV","TreeCounter","_s","count","setCount","donationCount","setDonationCount","totalDonations","setTotalDonations","finalCount","setFinalCount","loading","setLoading","error","setError","animationComplete","setAnimationComplete","lastFetchTime","setLastFetchTime","animationDuration","animationRef","startTimeRef","previousDonationCount","animateCount","timestamp","current","elapsed","progress","Math","min","currentCount","floor","requestAnimationFrame","startAnimation","targetCount","console","log","cancelAnimationFrame","fetchTreeCount","forceRefresh","now","Date","treeCount","url","response","get","data","fromDonations","donationsAmount","countChanged","intervalId","setInterval","clearInterval","handleRefresh","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","toLocaleString","onClick","_c","$RefreshReg$"],"sources":["D:/All Projects/CrowdFundingWebsite/ecf2/src/components/TreeCounter.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport './TreeCounter.css'; \nimport axios from 'axios';\nimport apiEndpoints from \"../config/api\";\n\nfunction TreeCounter() {\n  const [count, setCount] = useState(0); // Total count for animation\n  const [donationCount, setDonationCount] = useState(0); // Count from donations\n  const [totalDonations, setTotalDonations] = useState(0); // Total donation amount\n  const [finalCount, setFinalCount] = useState(0); // Total final count\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [animationComplete, setAnimationComplete] = useState(false);\n  const [lastFetchTime, setLastFetchTime] = useState(0); // Track last fetch time\n  const animationDuration = 2000; // Duration in milliseconds\n  const animationRef = useRef(null);\n  const startTimeRef = useRef(null);\n  const previousDonationCount = useRef(0); // Track previous donation count\n\n  // Function to animate count from 0 to final number\n  const animateCount = (timestamp) => {\n    if (!startTimeRef.current) {\n      startTimeRef.current = timestamp;\n    }\n    \n    const elapsed = timestamp - startTimeRef.current;\n    const progress = Math.min(elapsed / animationDuration, 1);\n    \n    const currentCount = Math.floor(progress * finalCount);\n    setCount(currentCount);\n    \n    if (progress < 1) {\n      animationRef.current = requestAnimationFrame(animateCount);\n    } else {\n      setCount(finalCount);\n      setAnimationComplete(true);\n      startTimeRef.current = null;\n    }\n  };\n\n  // Function to start the animation\n  const startAnimation = (targetCount) => {\n    console.log(`Starting animation from 0 to ${targetCount}`);\n    setCount(0);\n    setAnimationComplete(false);\n    setFinalCount(targetCount);\n    \n    if (animationRef.current) {\n      cancelAnimationFrame(animationRef.current);\n    }\n    \n    animationRef.current = requestAnimationFrame(animateCount);\n  };\n\n  // Function to fetch tree count from the server\n  const fetchTreeCount = async (forceRefresh = false) => {\n    try {\n      // Only fetch if it's been more than 5 seconds since last fetch, or forced refresh\n      const now = Date.now();\n      if (!forceRefresh && now - lastFetchTime < 5000) {\n        console.log('Skipping fetch - too soon since last fetch');\n        return;\n      }\n      \n      setLastFetchTime(now);\n      setLoading(true);\n      console.log('Fetching tree count from:', apiEndpoints.treeCount);\n      \n      // Add cache busting to avoid browser cache\n      const url = `${apiEndpoints.treeCount}?_t=${now}`;\n      const response = await axios.get(url);\n      \n      console.log('Tree count response:', response.data);\n      \n      if (response.data) {\n        // Get the donation count (trees from donations) \n        const fromDonations = response.data.fromDonations || 0;\n        const donationsAmount = response.data.totalDonations || 0;\n        \n        console.log(`Trees from donations: ${fromDonations}, Total donations: ${donationsAmount} INR`);\n        \n        // Check if the count has changed\n        const countChanged = fromDonations !== previousDonationCount.current;\n        console.log(`Previous count: ${previousDonationCount.current}, New count: ${fromDonations}, Changed: ${countChanged}`);\n        \n        // Update state with the correct values\n        setDonationCount(fromDonations);\n        setTotalDonations(donationsAmount);\n        previousDonationCount.current = fromDonations;\n        \n        // Decide whether to animate\n        if (!animationComplete || countChanged) {\n          console.log('Starting animation due to new count or initial load');\n          startAnimation(fromDonations);\n        } else {\n          console.log('Count unchanged, not animating');\n          setFinalCount(fromDonations);\n          setCount(fromDonations);\n        }\n        setError(null);\n      } else {\n        console.error('Invalid response format:', response.data);\n        setError('Invalid tree count data');\n      }\n    } catch (error) {\n      console.error('Error fetching tree count:', error);\n      setError('Could not update tree count');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Start by fetching the initial tree count\n    fetchTreeCount(true);\n\n    // Set an interval to fetch the updated tree count every 10 seconds\n    const intervalId = setInterval(() => {\n      fetchTreeCount(true);\n    }, 10000); // Update every 10 seconds\n\n    // Clean up\n    return () => {\n      clearInterval(intervalId);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, []); // Empty dependency array so this runs only once when the component mounts\n\n  // Manual refresh button handler\n  const handleRefresh = () => {\n    fetchTreeCount(true);\n  };\n\n  return (\n    <div className=\"tree-counter-container\">\n      {loading && !animationComplete && <div className=\"tree-counter-loading\">Loading trees...</div>}\n      \n      <div className=\"tree-counter-main\">\n        <span className=\"tree-counter-count\" title=\"Trees planted from donations\">\n          {count}\n        </span>\n        <span className=\"tree-counter-label\">Trees Planted</span>\n      </div>\n      \n      {donationCount > 0 && (\n        <div className=\"tree-counter-details\">\n          <div className=\"tree-counter-detail-item\">\n            <span className=\"detail-label\">From Donations:</span>\n            <span className=\"detail-value\">{donationCount} trees</span>\n          </div>\n          <div className=\"tree-counter-detail-item\">\n            <span className=\"detail-label\">Donation Amount:</span>\n            <span className=\"detail-value\">{totalDonations.toLocaleString()} INR</span>\n          </div>\n        </div>\n      )}\n      \n      {error && <span className=\"tree-counter-error\">{error}</span>}\n      \n      <button onClick={handleRefresh} className=\"tree-counter-refresh\">\n        ↻ Refresh\n      </button>\n    </div>\n  );\n}\n\nexport default TreeCounter;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,mBAAmB;AAC1B,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACvD,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACzD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACjD,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACoB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACsB,aAAa,EAAEC,gBAAgB,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACvD,MAAMwB,iBAAiB,GAAG,IAAI,CAAC,CAAC;EAChC,MAAMC,YAAY,GAAGxB,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMyB,YAAY,GAAGzB,MAAM,CAAC,IAAI,CAAC;EACjC,MAAM0B,qBAAqB,GAAG1B,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEzC;EACA,MAAM2B,YAAY,GAAIC,SAAS,IAAK;IAClC,IAAI,CAACH,YAAY,CAACI,OAAO,EAAE;MACzBJ,YAAY,CAACI,OAAO,GAAGD,SAAS;IAClC;IAEA,MAAME,OAAO,GAAGF,SAAS,GAAGH,YAAY,CAACI,OAAO;IAChD,MAAME,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACH,OAAO,GAAGP,iBAAiB,EAAE,CAAC,CAAC;IAEzD,MAAMW,YAAY,GAAGF,IAAI,CAACG,KAAK,CAACJ,QAAQ,GAAGlB,UAAU,CAAC;IACtDL,QAAQ,CAAC0B,YAAY,CAAC;IAEtB,IAAIH,QAAQ,GAAG,CAAC,EAAE;MAChBP,YAAY,CAACK,OAAO,GAAGO,qBAAqB,CAACT,YAAY,CAAC;IAC5D,CAAC,MAAM;MACLnB,QAAQ,CAACK,UAAU,CAAC;MACpBO,oBAAoB,CAAC,IAAI,CAAC;MAC1BK,YAAY,CAACI,OAAO,GAAG,IAAI;IAC7B;EACF,CAAC;;EAED;EACA,MAAMQ,cAAc,GAAIC,WAAW,IAAK;IACtCC,OAAO,CAACC,GAAG,CAAE,gCAA+BF,WAAY,EAAC,CAAC;IAC1D9B,QAAQ,CAAC,CAAC,CAAC;IACXY,oBAAoB,CAAC,KAAK,CAAC;IAC3BN,aAAa,CAACwB,WAAW,CAAC;IAE1B,IAAId,YAAY,CAACK,OAAO,EAAE;MACxBY,oBAAoB,CAACjB,YAAY,CAACK,OAAO,CAAC;IAC5C;IAEAL,YAAY,CAACK,OAAO,GAAGO,qBAAqB,CAACT,YAAY,CAAC;EAC5D,CAAC;;EAED;EACA,MAAMe,cAAc,GAAG,MAAAA,CAAOC,YAAY,GAAG,KAAK,KAAK;IACrD,IAAI;MACF;MACA,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;MACtB,IAAI,CAACD,YAAY,IAAIC,GAAG,GAAGvB,aAAa,GAAG,IAAI,EAAE;QAC/CkB,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;QACzD;MACF;MAEAlB,gBAAgB,CAACsB,GAAG,CAAC;MACrB5B,UAAU,CAAC,IAAI,CAAC;MAChBuB,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEtC,YAAY,CAAC4C,SAAS,CAAC;;MAEhE;MACA,MAAMC,GAAG,GAAI,GAAE7C,YAAY,CAAC4C,SAAU,OAAMF,GAAI,EAAC;MACjD,MAAMI,QAAQ,GAAG,MAAM/C,KAAK,CAACgD,GAAG,CAACF,GAAG,CAAC;MAErCR,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEQ,QAAQ,CAACE,IAAI,CAAC;MAElD,IAAIF,QAAQ,CAACE,IAAI,EAAE;QACjB;QACA,MAAMC,aAAa,GAAGH,QAAQ,CAACE,IAAI,CAACC,aAAa,IAAI,CAAC;QACtD,MAAMC,eAAe,GAAGJ,QAAQ,CAACE,IAAI,CAACvC,cAAc,IAAI,CAAC;QAEzD4B,OAAO,CAACC,GAAG,CAAE,yBAAwBW,aAAc,sBAAqBC,eAAgB,MAAK,CAAC;;QAE9F;QACA,MAAMC,YAAY,GAAGF,aAAa,KAAKzB,qBAAqB,CAACG,OAAO;QACpEU,OAAO,CAACC,GAAG,CAAE,mBAAkBd,qBAAqB,CAACG,OAAQ,gBAAesB,aAAc,cAAaE,YAAa,EAAC,CAAC;;QAEtH;QACA3C,gBAAgB,CAACyC,aAAa,CAAC;QAC/BvC,iBAAiB,CAACwC,eAAe,CAAC;QAClC1B,qBAAqB,CAACG,OAAO,GAAGsB,aAAa;;QAE7C;QACA,IAAI,CAAChC,iBAAiB,IAAIkC,YAAY,EAAE;UACtCd,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;UAClEH,cAAc,CAACc,aAAa,CAAC;QAC/B,CAAC,MAAM;UACLZ,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;UAC7C1B,aAAa,CAACqC,aAAa,CAAC;UAC5B3C,QAAQ,CAAC2C,aAAa,CAAC;QACzB;QACAjC,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,MAAM;QACLqB,OAAO,CAACtB,KAAK,CAAC,0BAA0B,EAAE+B,QAAQ,CAACE,IAAI,CAAC;QACxDhC,QAAQ,CAAC,yBAAyB,CAAC;MACrC;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdsB,OAAO,CAACtB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDC,QAAQ,CAAC,6BAA6B,CAAC;IACzC,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDlB,SAAS,CAAC,MAAM;IACd;IACA4C,cAAc,CAAC,IAAI,CAAC;;IAEpB;IACA,MAAMY,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnCb,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEX;IACA,OAAO,MAAM;MACXc,aAAa,CAACF,UAAU,CAAC;MACzB,IAAI9B,YAAY,CAACK,OAAO,EAAE;QACxBY,oBAAoB,CAACjB,YAAY,CAACK,OAAO,CAAC;MAC5C;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAM4B,aAAa,GAAGA,CAAA,KAAM;IAC1Bf,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,oBACEtC,OAAA;IAAKsD,SAAS,EAAC,wBAAwB;IAAAC,QAAA,GACpC5C,OAAO,IAAI,CAACI,iBAAiB,iBAAIf,OAAA;MAAKsD,SAAS,EAAC,sBAAsB;MAAAC,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAE9F3D,OAAA;MAAKsD,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAChCvD,OAAA;QAAMsD,SAAS,EAAC,oBAAoB;QAACM,KAAK,EAAC,8BAA8B;QAAAL,QAAA,EACtEpD;MAAK;QAAAqD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACP3D,OAAA;QAAMsD,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CAAC,EAELtD,aAAa,GAAG,CAAC,iBAChBL,OAAA;MAAKsD,SAAS,EAAC,sBAAsB;MAAAC,QAAA,gBACnCvD,OAAA;QAAKsD,SAAS,EAAC,0BAA0B;QAAAC,QAAA,gBACvCvD,OAAA;UAAMsD,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACrD3D,OAAA;UAAMsD,SAAS,EAAC,cAAc;UAAAC,QAAA,GAAElD,aAAa,EAAC,QAAM;QAAA;UAAAmD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxD,CAAC,eACN3D,OAAA;QAAKsD,SAAS,EAAC,0BAA0B;QAAAC,QAAA,gBACvCvD,OAAA;UAAMsD,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAgB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACtD3D,OAAA;UAAMsD,SAAS,EAAC,cAAc;UAAAC,QAAA,GAAEhD,cAAc,CAACsD,cAAc,CAAC,CAAC,EAAC,MAAI;QAAA;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,EAEA9C,KAAK,iBAAIb,OAAA;MAAMsD,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAAE1C;IAAK;MAAA2C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAE7D3D,OAAA;MAAQ8D,OAAO,EAAET,aAAc;MAACC,SAAS,EAAC,sBAAsB;MAAAC,QAAA,EAAC;IAEjE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACzD,EAAA,CAjKQD,WAAW;AAAA8D,EAAA,GAAX9D,WAAW;AAmKpB,eAAeA,WAAW;AAAC,IAAA8D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}