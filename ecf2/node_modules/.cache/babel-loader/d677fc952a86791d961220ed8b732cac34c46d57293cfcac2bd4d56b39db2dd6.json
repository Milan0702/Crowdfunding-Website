{"ast":null,"code":"var _jsxFileName = \"D:\\\\All Projects\\\\CrowdFundingWebsite\\\\ecf2\\\\src\\\\components\\\\TreeCounter.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport './TreeCounter.css';\nimport axios from 'axios';\nimport apiEndpoints from \"../config/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TreeCounter() {\n  _s();\n  const [count, setCount] = useState(0); // Start at 0 for animation\n  const [finalCount, setFinalCount] = useState(0); // Initialize to 0 instead of hardcoded value\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [animationComplete, setAnimationComplete] = useState(false);\n  const animationDuration = 2000; // Duration in milliseconds\n  const animationRef = useRef(null);\n  const startTimeRef = useRef(null);\n\n  // Function to animate count from 0 to final number\n  const animateCount = timestamp => {\n    if (!startTimeRef.current) {\n      startTimeRef.current = timestamp;\n    }\n    const elapsed = timestamp - startTimeRef.current;\n    const progress = Math.min(elapsed / animationDuration, 1);\n    const currentCount = Math.floor(progress * finalCount);\n    setCount(currentCount);\n    if (progress < 1) {\n      animationRef.current = requestAnimationFrame(animateCount);\n    } else {\n      setCount(finalCount);\n      setAnimationComplete(true);\n      startTimeRef.current = null;\n    }\n  };\n\n  // Function to start the animation\n  const startAnimation = targetCount => {\n    setCount(0);\n    setAnimationComplete(false);\n    setFinalCount(targetCount);\n    if (animationRef.current) {\n      cancelAnimationFrame(animationRef.current);\n    }\n    animationRef.current = requestAnimationFrame(animateCount);\n  };\n\n  // Function to fetch tree count from the server\n  const fetchTreeCount = async () => {\n    try {\n      setLoading(true);\n      console.log('Fetching tree count from:', apiEndpoints.treeCount);\n      const response = await axios.get(apiEndpoints.treeCount);\n      console.log('Tree count response:', response.data);\n\n      // Check for count property\n      if (response.data && (response.data.count !== undefined || response.data.treeCount !== undefined)) {\n        // Use count if available, otherwise fall back to treeCount (for backward compatibility)\n        const treeCount = response.data.count !== undefined ? response.data.count : response.data.treeCount;\n        console.log('Using tree count:', treeCount);\n        if (!animationComplete) {\n          // If this is the first load, animate from 0 to the fetched count\n          startAnimation(treeCount);\n        } else {\n          // If animation already happened, just update the count\n          setFinalCount(treeCount);\n          setCount(treeCount);\n        }\n        setError(null);\n      } else {\n        // Handle case where neither count nor treeCount properties exist\n        console.error('Invalid response format:', response.data);\n        setError('Invalid tree count data');\n      }\n    } catch (error) {\n      console.error('Error fetching tree count:', error);\n      setError('Could not update tree count');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    // Start by fetching the initial tree count\n    fetchTreeCount();\n\n    // Set an interval to fetch the updated tree count every 30 seconds\n    const intervalId = setInterval(() => {\n      fetchTreeCount();\n    }, 30000); // Update every 30 seconds\n\n    // Clean up\n    return () => {\n      clearInterval(intervalId);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, []); // Empty dependency array so this runs only once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-counter-container\",\n    children: [loading && !animationComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-counter-loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 41\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tree-counter-count\",\n      title: error ? 'Unable to update count' : 'Live tree count',\n      children: [count.toLocaleString(), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tree-counter-label\",\n      children: \"Trees Planted\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tree-counter-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(TreeCounter, \"GHkdjDgjBIfkJ8PTZNo3bFdkoCQ=\");\n_c = TreeCounter;\nexport default TreeCounter;\nvar _c;\n$RefreshReg$(_c, \"TreeCounter\");","map":{"version":3,"names":["React","useEffect","useState","useRef","axios","apiEndpoints","jsxDEV","_jsxDEV","TreeCounter","_s","count","setCount","finalCount","setFinalCount","loading","setLoading","error","setError","animationComplete","setAnimationComplete","animationDuration","animationRef","startTimeRef","animateCount","timestamp","current","elapsed","progress","Math","min","currentCount","floor","requestAnimationFrame","startAnimation","targetCount","cancelAnimationFrame","fetchTreeCount","console","log","treeCount","response","get","data","undefined","intervalId","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","toLocaleString","_c","$RefreshReg$"],"sources":["D:/All Projects/CrowdFundingWebsite/ecf2/src/components/TreeCounter.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport './TreeCounter.css'; \nimport axios from 'axios';\nimport apiEndpoints from \"../config/api\";\n\nfunction TreeCounter() {\n  const [count, setCount] = useState(0); // Start at 0 for animation\n  const [finalCount, setFinalCount] = useState(0); // Initialize to 0 instead of hardcoded value\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [animationComplete, setAnimationComplete] = useState(false);\n  const animationDuration = 2000; // Duration in milliseconds\n  const animationRef = useRef(null);\n  const startTimeRef = useRef(null);\n\n  // Function to animate count from 0 to final number\n  const animateCount = (timestamp) => {\n    if (!startTimeRef.current) {\n      startTimeRef.current = timestamp;\n    }\n    \n    const elapsed = timestamp - startTimeRef.current;\n    const progress = Math.min(elapsed / animationDuration, 1);\n    \n    const currentCount = Math.floor(progress * finalCount);\n    setCount(currentCount);\n    \n    if (progress < 1) {\n      animationRef.current = requestAnimationFrame(animateCount);\n    } else {\n      setCount(finalCount);\n      setAnimationComplete(true);\n      startTimeRef.current = null;\n    }\n  };\n\n  // Function to start the animation\n  const startAnimation = (targetCount) => {\n    setCount(0);\n    setAnimationComplete(false);\n    setFinalCount(targetCount);\n    \n    if (animationRef.current) {\n      cancelAnimationFrame(animationRef.current);\n    }\n    \n    animationRef.current = requestAnimationFrame(animateCount);\n  };\n\n  // Function to fetch tree count from the server\n  const fetchTreeCount = async () => {\n    try {\n      setLoading(true);\n      console.log('Fetching tree count from:', apiEndpoints.treeCount);\n      const response = await axios.get(apiEndpoints.treeCount);\n      console.log('Tree count response:', response.data);\n      \n      // Check for count property\n      if (response.data && (response.data.count !== undefined || response.data.treeCount !== undefined)) {\n        // Use count if available, otherwise fall back to treeCount (for backward compatibility)\n        const treeCount = response.data.count !== undefined ? response.data.count : response.data.treeCount;\n        console.log('Using tree count:', treeCount);\n        \n        if (!animationComplete) {\n          // If this is the first load, animate from 0 to the fetched count\n          startAnimation(treeCount);\n        } else {\n          // If animation already happened, just update the count\n          setFinalCount(treeCount);\n          setCount(treeCount);\n        }\n        setError(null);\n      } else {\n        // Handle case where neither count nor treeCount properties exist\n        console.error('Invalid response format:', response.data);\n        setError('Invalid tree count data');\n      }\n    } catch (error) {\n      console.error('Error fetching tree count:', error);\n      setError('Could not update tree count');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Start by fetching the initial tree count\n    fetchTreeCount();\n\n    // Set an interval to fetch the updated tree count every 30 seconds\n    const intervalId = setInterval(() => {\n      fetchTreeCount();\n    }, 30000); // Update every 30 seconds\n\n    // Clean up\n    return () => {\n      clearInterval(intervalId);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, []); // Empty dependency array so this runs only once when the component mounts\n\n  return (\n    <div className=\"tree-counter-container\">\n      {loading && !animationComplete && <div className=\"tree-counter-loading\">Loading...</div>}\n      <span className=\"tree-counter-count\" title={error ? 'Unable to update count' : 'Live tree count'}>\n        {count.toLocaleString()} {/* Display the number with commas */}\n      </span>\n      <span className=\"tree-counter-label\">Trees Planted</span>\n      {error && <span className=\"tree-counter-error\">{error}</span>}\n    </div>\n  );\n}\n\nexport default TreeCounter;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}